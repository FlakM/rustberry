ARG database_url

FROM rust:1.46.0-buster as planner
WORKDIR /app
# We only pay the installation cost once, 
# it will be cached from the second build onwards
# To ensure a reproducible build consider pinning 
# the cargo-chef version with `--version X.X.X`
RUN cargo install cargo-chef 
COPY . .
RUN cargo chef prepare  --recipe-path recipe.json

FROM rust:1.46.0-buster as cacher
WORKDIR /app
RUN cargo install cargo-chef
COPY --from=planner /app/recipe.json recipe.json
RUN cargo chef cook --release --recipe-path recipe.json

FROM rust:1.46.0-buster as builder
RUN apt-get -y update && apt-get -y install gcc-arm-linux-gnueabihf
RUN rustup target add arm-unknown-linux-gnueabihf
RUN mkdir -p /source /.cargo /app && \
    echo "[target.arm-unknown-linux-gnueabihf]\nlinker = \"arm-linux-gnueabihf-gcc\"" > /.cargo/config
WORKDIR /app
COPY . .
# Copy over the cached dependencies
COPY --from=cacher /app/target target
COPY --from=cacher /usr/local/cargo /usr/local/cargo

WORKDIR /app

ENV DATABASE_URL=$database_url
RUN cargo build --target arm-unknown-linux-gnueabihf --release




# FROM rust:1.46.0-buster
# LABEL maintainer="yasuyuky <yasuyuki.ymd@gmail.com>"

# RUN apt-get -y update && apt-get -y install gcc-arm-linux-gnueabihf
# RUN rustup target add arm-unknown-linux-gnueabihf
# RUN mkdir -p /source /.cargo /usr/local/src && \
#     echo "[target.arm-unknown-linux-gnueabihf]\nlinker = \"arm-linux-gnueabihf-gcc\"" > /.cargo/config
# WORKDIR /usr/local/src
# # ENV OPENSSL_VER 1.1.1g
# # ENV CC arm-linux-gnueabihf-gcc
# # ENV PREFIX /usr/arm-linux-gnueabihf
# # ENV PATH /usr/local/bin:$PATH
# # ENV PKG_CONFIG_PATH /usr/local/lib/pkgconfig
# # RUN curl -sL http://www.openssl.org/source/openssl-$OPENSSL_VER.tar.gz | tar xz && \
# #     cd openssl-$OPENSSL_VER && \
# #     ./Configure no-shared --prefix=$PREFIX --openssldir=$PREFIX/ssl no-zlib linux-armv4 -fPIC && \
# #     make -j$(nproc) && make install && cd .. && rm -rf openssl-$OPENSSL_VER
# # ENV SSL_CERT_FILE /etc/ssl/certs/ca-certificates.crt
# # ENV SSL_CERT_DIR /etc/ssl/certs
# # ENV OPENSSL_LIB_DIR $PREFIX/lib
# # ENV OPENSSL_INCLUDE_DIR $PREFIX/include
# # ENV OPENSSL_DIR $PREFIX
# # ENV OPENSSL_STATIC 1
# # ENV PKG_CONFIG_ALLOW_CROSS 1
# WORKDIR /source
# CMD ["bash"]